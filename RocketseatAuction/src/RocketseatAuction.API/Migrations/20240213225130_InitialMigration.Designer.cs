// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RocketseatAuction.API.Repositories;

#nullable disable

namespace RocketseatAuction.API.Migrations
{
    [DbContext(typeof(RocketseatAuctionDbContext))]
    [Migration("20240213225130_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RocketseatAuction.API.Entities.Auction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Ends")
                        .HasColumnType("datetime")
                        .HasColumnName("Ends");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("Starts")
                        .HasColumnType("datetime")
                        .HasColumnName("Starts");

                    b.Property<DateTime>("lastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdated")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.ToTable("Auctions", (string)null);
                });

            modelBuilder.Entity("RocketseatAuction.API.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuctionId")
                        .HasColumnType("int")
                        .HasColumnName("AuctionId");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal")
                        .HasColumnName("BasePrice");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Brand");

                    b.Property<int>("Condition")
                        .HasColumnType("int")
                        .HasColumnName("Condition");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)")
                        .HasColumnName("Name");

                    b.Property<DateTime>("lastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnName("LastUpdated")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("RocketseatAuction.API.Entities.Item", b =>
                {
                    b.HasOne("RocketseatAuction.API.Entities.Auction", "Auction")
                        .WithMany("Items")
                        .HasForeignKey("AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");
                });

            modelBuilder.Entity("RocketseatAuction.API.Entities.Auction", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
